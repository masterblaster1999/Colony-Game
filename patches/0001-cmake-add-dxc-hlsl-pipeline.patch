From 1111111111111111111111111111111111111111 Mon Sep 17 00:00:00 2001
Subject: [PATCH 1/2] CMake: Add DXC HLSL pipeline; cache outputs under
 build/shaders; wire to ColonyGame

---
 cmake/ColonyShaders.cmake | 190 ++++++++++++++++++++++++++++++++++++++++++++++
 src/CMakeLists.txt        |  18 +++++
 2 files changed, 208 insertions(+)
 create mode 100644 cmake/ColonyShaders.cmake

diff --git a/cmake/ColonyShaders.cmake b/cmake/ColonyShaders.cmake
new file mode 100644
index 0000000..aaaaaaaa
--- /dev/null
+++ b/cmake/ColonyShaders.cmake
@@
+# Windows-only DXC pipeline for HLSL
+# Usage (in the SAME directory that defines your game target):
+#   set(COLONY_GAME_TARGET ColonyGame)
+#   include(${CMAKE_SOURCE_DIR}/cmake/ColonyShaders.cmake)
+#
+# Variables you may override before including:
+#   COLONY_SHADER_DIR      (defaults to ${CMAKE_SOURCE_DIR}/renderer/Shaders)
+#   COLONY_SHADER_BIN_DIR  (defaults to ${CMAKE_BINARY_DIR}/shaders)
+#
+if(NOT WIN32)
+  message(FATAL_ERROR "ColonyShaders.cmake is Windows-only (D3D11/DXC).")
+endif()
+
+if(NOT COLONY_GAME_TARGET)
+  message(FATAL_ERROR "Set COLONY_GAME_TARGET before including ColonyShaders.cmake")
+endif()
+
+# Defaults
+if(NOT DEFINED COLONY_SHADER_DIR)
+  set(COLONY_SHADER_DIR "${CMAKE_SOURCE_DIR}/renderer/Shaders")
+endif()
+if(NOT DEFINED COLONY_SHADER_BIN_DIR)
+  set(COLONY_SHADER_BIN_DIR "${CMAKE_BINARY_DIR}/shaders")
+endif()
+
+# DXC from vcpkg
+find_package(directx-dxc CONFIG REQUIRED)
+if(NOT DEFINED DIRECTX_DXC_TOOL)
+  message(FATAL_ERROR "DIRECTX_DXC_TOOL is not defined; check directx-dxc via vcpkg.")
+endif()
+
+# Gather shaders; make includes common dependencies to force rebuild on edit
+file(GLOB_RECURSE COLONY_SHADER_SOURCES CONFIGURE_DEPENDS
+     "${COLONY_SHADER_DIR}/*.hlsl")
+file(GLOB_RECURSE COLONY_SHADER_INCLUDES CONFIGURE_DEPENDS
+     "${COLONY_SHADER_DIR}/*.hlsli")
+
+# Infer shader stage from filename suffix (_vs/_ps/_cs/_gs/_hs/_ds)
+function(_colony_profile_from_filename in_file out_profile out_stage)
+  get_filename_component(_name ${in_file} NAME_WE)
+  string(TOLOWER "${_name}" _lower)
+  if(_lower MATCHES "_vs$")
+    set(_p "vs_5_0") ; set(_s "Vertex")
+  elseif(_lower MATCHES "_ps$")
+    set(_p "ps_5_0") ; set(_s "Pixel")
+  elseif(_lower MATCHES "_cs$")
+    set(_p "cs_5_0") ; set(_s "Compute")
+  elseif(_lower MATCHES "_gs$")
+    set(_p "gs_5_0") ; set(_s "Geometry")
+  elseif(_lower MATCHES "_hs$")
+    set(_p "hs_5_0") ; set(_s "Hull")
+  elseif(_lower MATCHES "_ds$")
+    set(_p "ds_5_0") ; set(_s "Domain")
+  else()
+    # Fallback to pixel if stage is unknown
+    set(_p "ps_5_0") ; set(_s "Pixel")
+  endif()
+  set(${out_profile} "${_p}" PARENT_SCOPE)
+  set(${out_stage}   "${_s}" PARENT_SCOPE)
+endfunction()
+
+# Common DXC flags
+set(_DXC_DEBUG_FLAGS $<$<CONFIG:Debug>:-Zi -Qembed_debug>)
+set(_DXC_OPT_FLAGS   $<$<CONFIG:Release>:-O3> $<$<CONFIG:RelWithDebInfo>:-O3 -Zi -Qembed_debug>)
+set(_DXC_COMMON_FLAGS -nologo -Zpr -HV 2018 -E main -I "${COLONY_SHADER_DIR}")
+
+set(_outputs)
+foreach(SH ${COLONY_SHADER_SOURCES})
+  # Preserve subdirectory structure under build/shaders/
+  file(RELATIVE_PATH _rel "${COLONY_SHADER_DIR}" "${SH}")
+  get_filename_component(_rel_dir "${_rel}" DIRECTORY)
+  get_filename_component(_fname "${SH}" NAME_WE)
+  set(_out_dir "${COLONY_SHADER_BIN_DIR}/${_rel_dir}")
+  set(_out     "${_out_dir}/${_fname}.cso")
+
+  _colony_profile_from_filename("${SH}" _profile _stage)
+
+  add_custom_command(
+    OUTPUT "${_out}"
+    COMMAND ${CMAKE_COMMAND} -E make_directory "${_out_dir}"
+    COMMAND "${DIRECTX_DXC_TOOL}"
+            ${_DXC_COMMON_FLAGS} ${_DXC_DEBUG_FLAGS} ${_DXC_OPT_FLAGS}
+            -T ${_profile}
+            -Fo "${_out}"
+            "${SH}"
+    DEPENDS "${SH}" ${COLONY_SHADER_INCLUDES}
+    BYPRODUCTS "${_out}"
+    COMMENT "DXC ${_stage}: ${_rel} -> ${_out}"
+    VERBATIM
+  )
+  list(APPEND _outputs "${_out}")
+endforeach()
+
+# Aggregate target; MUST be in the same directory as ${COLONY_GAME_TARGET}
+add_custom_target(colony_shaders DEPENDS ${_outputs})
+add_dependencies(${COLONY_GAME_TARGET} colony_shaders)
+
+# Show HLSL files in the VS solution for convenience
+if(MSVC)
+  source_group(TREE "${COLONY_SHADER_DIR}" FILES ${COLONY_SHADER_SOURCES} ${COLONY_SHADER_INCLUDES})
+  set_source_files_properties(${COLONY_SHADER_SOURCES} ${COLONY_SHADER_INCLUDES}
+                              PROPERTIES HEADER_FILE_ONLY ON)
+  target_sources(${COLONY_GAME_TARGET} PRIVATE ${COLONY_SHADER_SOURCES} ${COLONY_SHADER_INCLUDES})
+endif()
+
+# Export list for parent context (optional)
+set(COLONY_SHADER_OUTPUTS ${_outputs} PARENT_SCOPE)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index bbbbbbb..ccccccc 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@
 # ... your existing content that defines sources, include dirs, etc.
 
 # Ensure the executable target is declared here in src/ (important)
 add_executable(ColonyGame
     ${SRC_FILES}
 )
 
+# --- HLSL (DXC) custom pipeline, cached under build/shaders ---
+# This must live in the SAME directory as the target to satisfy CMake's
+# add_custom_command/add_custom_target directory-scope rule.
+set(COLONY_GAME_TARGET ColonyGame)
+set(COLONY_SHADER_DIR      "${CMAKE_SOURCE_DIR}/renderer/Shaders")
+set(COLONY_SHADER_BIN_DIR  "${CMAKE_BINARY_DIR}/shaders")
+include("${CMAKE_SOURCE_DIR}/cmake/ColonyShaders.cmake")
+
 # Link libraries, options, etc. continue below...
 
