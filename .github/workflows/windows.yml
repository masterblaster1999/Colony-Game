name: Windows CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: windows-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Windows-safe filenames
        shell: pwsh
        run: |
          $invalid = @()
          git ls-tree -r --name-only HEAD | ForEach-Object {
            if ($_ -match '[:<>\"|?*]' -or $_ -match '(^|[\\/])(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\.|[\\/]|$)') {
              $invalid += $_
            }
          }
          if ($invalid.Count -gt 0) {
            Write-Host "❌ Invalid Windows paths found:" -ForegroundColor Red
            $invalid | ForEach-Object { Write-Host "  $_" }
            exit 1
          } else {
            Write-Host "✅ All file names are Windows-safe."
          }

      - name: Setup CMake (latest)
        uses: lukka/get-cmake@latest

      - name: Locate preinstalled vcpkg & export VCPKG_ROOT
        id: vcpkgroot
        shell: pwsh
        run: |
          $candidates = @(
            $env:VCPKG_INSTALLATION_ROOT,                   # if image provides it
            "C:\vcpkg",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\vcpkg",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\VC\vcpkg",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\VC\vcpkg"
          ) | Where-Object { $_ -and (Test-Path $_) }
          if ($candidates.Count -eq 0) {
            throw "vcpkg not found on runner. Consider adding lukka/run-vcpkg@v11 or checking the image notes."
          }
          $root = $candidates[0]
          "VCPKG_ROOT=$root" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using VCPKG_ROOT=$root"

      - name: Cache vcpkg artifacts (manifest mode)
        if: ${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed
            C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}

      - name: Configure CMake (MSVC + vcpkg toolchain)
        shell: pwsh
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE="${env:VCPKG_ROOT}\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_MANIFEST_MODE=ON
          -DBUILD_TESTING=ON
          -DCOLONY_LTO=OFF

      - name: Build (Release)
        run: cmake --build build --config Release --parallel

      - name: Stage (Release)
        # requires 'stage_win' target in your CMake (see snippet below)
        run: cmake --build build --config Release --target stage_win --parallel

      # === Minimal fix inserted here: compute short SHA in PowerShell ===
      - name: Derive short SHA (7)
        id: shortsha
        shell: pwsh
        env:
          RAW_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          $short = "${env:RAW_SHA}".Substring(0,7)
          "SHORT_SHA=$short" | Out-File -FilePath $env:GITHUB_ENV -Append
          "short_sha=$short" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload staged artifact
        uses: actions/upload-artifact@v4
        with:
          name: ColonyGame-win64-${{ steps.shortsha.outputs.short_sha }}
          path: build/stage/bin/**
          if-no-files-found: error
          retention-days: 7

      - name: Always upload vcpkg/CMake logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            build/**/CMakeOutput.log
            build/**/CMakeError.log
            build/vcpkg-manifest-install.log
