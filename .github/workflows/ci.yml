# .github/workflows/ci.yml
name: CI (Windows)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'
  push:
    branches: [ main ]            # run on merges to main
    tags:     [ 'v*', 'release-*' ] # run on version tags for releases
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: write   # needed to publish release assets on tag pushes

# Cancel previous runs for the same branch/PR to cut costs
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  windows:
    name: Build • Test • Package (Windows)
    runs-on: windows-latest
    timeout-minutes: 60
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up MSVC (VS 2022)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Setup CMake (latest)
        uses: lukka/get-cmake@latest

      - name: Locate preinstalled vcpkg & export VCPKG_ROOT
        id: vcpkgroot
        run: |
          $candidates = @(
            $env:VCPKG_INSTALLATION_ROOT,
            "C:\vcpkg",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\vcpkg",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\VC\vcpkg",
            "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\VC\vcpkg"
          ) | Where-Object { $_ -and (Test-Path $_) }
          if ($candidates.Count -eq 0) { throw "vcpkg not found on runner." }
          $root = $candidates[0]
          "VCPKG_ROOT=$root" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Using VCPKG_ROOT=$root"

      - name: Cache vcpkg artifacts (manifest mode)
        if: ${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') != '' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}\installed
            C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
          restore-keys: vcpkg-${{ runner.os }}-

      - name: Configure (CMake, VS 2022 x64, vcpkg toolchain)
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE="${env:VCPKG_ROOT}\scripts\buildsystems\vcpkg.cmake"
          -DVCPKG_MANIFEST_MODE=ON
          -DBUILD_TESTING=ON
          -DCOLONY_LTO=OFF

      - name: Build (Release)
        run: cmake --build build --config Release --parallel

      - name: Run tests (ctest)
        run: ctest --test-dir build -C Release --output-on-failure

      - name: Stage runtime (stage_win)
        run: cmake --build build --config Release --target stage_win --parallel

      - name: Derive short SHA (7)
        id: shortsha
        env:
          RAW_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
        run: |
          $short = "${env:RAW_SHA}".Substring(0,7)
          "short=$short" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # Artifacts on PRs
      - name: Upload staged artifact (PRs)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ColonyGame-win64-${{ steps.shortsha.outputs.short }}
          path: build/stage/bin/**
          if-no-files-found: error
          retention-days: 7

      # Tag pushes create a GitHub Release with staged files
      - name: Publish release (tags)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          files: build/stage/bin/**
          generate_release_notes: true
